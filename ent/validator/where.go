// Code generated by entc, DO NOT EDIT.

package validator

import (
	"entgo.io/ent/dialect/sql"
	"github.com/OdysseyMomentumExperience/harvester/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Commission applies equality check predicate on the "commission" field. It's identical to CommissionEQ.
func Commission(v float64) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommission), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// Reserved applies equality check predicate on the "reserved" field. It's identical to ReservedEQ.
func Reserved(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReserved), v))
	})
}

// OwnStake applies equality check predicate on the "own_stake" field. It's identical to OwnStakeEQ.
func OwnStake(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnStake), v))
	})
}

// TotalStake applies equality check predicate on the "total_stake" field. It's identical to TotalStakeEQ.
func TotalStake(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalStake), v))
	})
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHash), v))
	})
}

// Chain applies equality check predicate on the "chain" field. It's identical to ChainEQ.
func Chain(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChain), v))
	})
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountID), v))
	})
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...string) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccountID), v...))
	})
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...string) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccountID), v...))
	})
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountID), v))
	})
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountID), v))
	})
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountID), v))
	})
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountID), v))
	})
}

// AccountIDContains applies the Contains predicate on the "account_id" field.
func AccountIDContains(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccountID), v))
	})
}

// AccountIDHasPrefix applies the HasPrefix predicate on the "account_id" field.
func AccountIDHasPrefix(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccountID), v))
	})
}

// AccountIDHasSuffix applies the HasSuffix predicate on the "account_id" field.
func AccountIDHasSuffix(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccountID), v))
	})
}

// AccountIDEqualFold applies the EqualFold predicate on the "account_id" field.
func AccountIDEqualFold(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccountID), v))
	})
}

// AccountIDContainsFold applies the ContainsFold predicate on the "account_id" field.
func AccountIDContainsFold(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccountID), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// CommissionEQ applies the EQ predicate on the "commission" field.
func CommissionEQ(v float64) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommission), v))
	})
}

// CommissionNEQ applies the NEQ predicate on the "commission" field.
func CommissionNEQ(v float64) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCommission), v))
	})
}

// CommissionIn applies the In predicate on the "commission" field.
func CommissionIn(vs ...float64) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCommission), v...))
	})
}

// CommissionNotIn applies the NotIn predicate on the "commission" field.
func CommissionNotIn(vs ...float64) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCommission), v...))
	})
}

// CommissionGT applies the GT predicate on the "commission" field.
func CommissionGT(v float64) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCommission), v))
	})
}

// CommissionGTE applies the GTE predicate on the "commission" field.
func CommissionGTE(v float64) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCommission), v))
	})
}

// CommissionLT applies the LT predicate on the "commission" field.
func CommissionLT(v float64) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCommission), v))
	})
}

// CommissionLTE applies the LTE predicate on the "commission" field.
func CommissionLTE(v float64) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCommission), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBalance), v))
	})
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...string) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBalance), v...))
	})
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...string) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBalance), v...))
	})
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBalance), v))
	})
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBalance), v))
	})
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBalance), v))
	})
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBalance), v))
	})
}

// BalanceContains applies the Contains predicate on the "balance" field.
func BalanceContains(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBalance), v))
	})
}

// BalanceHasPrefix applies the HasPrefix predicate on the "balance" field.
func BalanceHasPrefix(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBalance), v))
	})
}

// BalanceHasSuffix applies the HasSuffix predicate on the "balance" field.
func BalanceHasSuffix(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBalance), v))
	})
}

// BalanceEqualFold applies the EqualFold predicate on the "balance" field.
func BalanceEqualFold(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBalance), v))
	})
}

// BalanceContainsFold applies the ContainsFold predicate on the "balance" field.
func BalanceContainsFold(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBalance), v))
	})
}

// ReservedEQ applies the EQ predicate on the "reserved" field.
func ReservedEQ(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReserved), v))
	})
}

// ReservedNEQ applies the NEQ predicate on the "reserved" field.
func ReservedNEQ(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReserved), v))
	})
}

// ReservedIn applies the In predicate on the "reserved" field.
func ReservedIn(vs ...string) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReserved), v...))
	})
}

// ReservedNotIn applies the NotIn predicate on the "reserved" field.
func ReservedNotIn(vs ...string) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReserved), v...))
	})
}

// ReservedGT applies the GT predicate on the "reserved" field.
func ReservedGT(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReserved), v))
	})
}

// ReservedGTE applies the GTE predicate on the "reserved" field.
func ReservedGTE(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReserved), v))
	})
}

// ReservedLT applies the LT predicate on the "reserved" field.
func ReservedLT(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReserved), v))
	})
}

// ReservedLTE applies the LTE predicate on the "reserved" field.
func ReservedLTE(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReserved), v))
	})
}

// ReservedContains applies the Contains predicate on the "reserved" field.
func ReservedContains(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReserved), v))
	})
}

// ReservedHasPrefix applies the HasPrefix predicate on the "reserved" field.
func ReservedHasPrefix(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReserved), v))
	})
}

// ReservedHasSuffix applies the HasSuffix predicate on the "reserved" field.
func ReservedHasSuffix(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReserved), v))
	})
}

// ReservedEqualFold applies the EqualFold predicate on the "reserved" field.
func ReservedEqualFold(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReserved), v))
	})
}

// ReservedContainsFold applies the ContainsFold predicate on the "reserved" field.
func ReservedContainsFold(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReserved), v))
	})
}

// OwnStakeEQ applies the EQ predicate on the "own_stake" field.
func OwnStakeEQ(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnStake), v))
	})
}

// OwnStakeNEQ applies the NEQ predicate on the "own_stake" field.
func OwnStakeNEQ(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOwnStake), v))
	})
}

// OwnStakeIn applies the In predicate on the "own_stake" field.
func OwnStakeIn(vs ...string) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOwnStake), v...))
	})
}

// OwnStakeNotIn applies the NotIn predicate on the "own_stake" field.
func OwnStakeNotIn(vs ...string) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOwnStake), v...))
	})
}

// OwnStakeGT applies the GT predicate on the "own_stake" field.
func OwnStakeGT(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOwnStake), v))
	})
}

// OwnStakeGTE applies the GTE predicate on the "own_stake" field.
func OwnStakeGTE(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOwnStake), v))
	})
}

// OwnStakeLT applies the LT predicate on the "own_stake" field.
func OwnStakeLT(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOwnStake), v))
	})
}

// OwnStakeLTE applies the LTE predicate on the "own_stake" field.
func OwnStakeLTE(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOwnStake), v))
	})
}

// OwnStakeContains applies the Contains predicate on the "own_stake" field.
func OwnStakeContains(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOwnStake), v))
	})
}

// OwnStakeHasPrefix applies the HasPrefix predicate on the "own_stake" field.
func OwnStakeHasPrefix(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOwnStake), v))
	})
}

// OwnStakeHasSuffix applies the HasSuffix predicate on the "own_stake" field.
func OwnStakeHasSuffix(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOwnStake), v))
	})
}

// OwnStakeEqualFold applies the EqualFold predicate on the "own_stake" field.
func OwnStakeEqualFold(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOwnStake), v))
	})
}

// OwnStakeContainsFold applies the ContainsFold predicate on the "own_stake" field.
func OwnStakeContainsFold(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOwnStake), v))
	})
}

// TotalStakeEQ applies the EQ predicate on the "total_stake" field.
func TotalStakeEQ(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalStake), v))
	})
}

// TotalStakeNEQ applies the NEQ predicate on the "total_stake" field.
func TotalStakeNEQ(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalStake), v))
	})
}

// TotalStakeIn applies the In predicate on the "total_stake" field.
func TotalStakeIn(vs ...string) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalStake), v...))
	})
}

// TotalStakeNotIn applies the NotIn predicate on the "total_stake" field.
func TotalStakeNotIn(vs ...string) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalStake), v...))
	})
}

// TotalStakeGT applies the GT predicate on the "total_stake" field.
func TotalStakeGT(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalStake), v))
	})
}

// TotalStakeGTE applies the GTE predicate on the "total_stake" field.
func TotalStakeGTE(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalStake), v))
	})
}

// TotalStakeLT applies the LT predicate on the "total_stake" field.
func TotalStakeLT(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalStake), v))
	})
}

// TotalStakeLTE applies the LTE predicate on the "total_stake" field.
func TotalStakeLTE(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalStake), v))
	})
}

// TotalStakeContains applies the Contains predicate on the "total_stake" field.
func TotalStakeContains(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTotalStake), v))
	})
}

// TotalStakeHasPrefix applies the HasPrefix predicate on the "total_stake" field.
func TotalStakeHasPrefix(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTotalStake), v))
	})
}

// TotalStakeHasSuffix applies the HasSuffix predicate on the "total_stake" field.
func TotalStakeHasSuffix(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTotalStake), v))
	})
}

// TotalStakeEqualFold applies the EqualFold predicate on the "total_stake" field.
func TotalStakeEqualFold(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTotalStake), v))
	})
}

// TotalStakeContainsFold applies the ContainsFold predicate on the "total_stake" field.
func TotalStakeContainsFold(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTotalStake), v))
	})
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHash), v))
	})
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHash), v))
	})
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHash), v...))
	})
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHash), v...))
	})
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHash), v))
	})
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHash), v))
	})
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHash), v))
	})
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHash), v))
	})
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHash), v))
	})
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHash), v))
	})
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHash), v))
	})
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHash), v))
	})
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHash), v))
	})
}

// ChainEQ applies the EQ predicate on the "chain" field.
func ChainEQ(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChain), v))
	})
}

// ChainNEQ applies the NEQ predicate on the "chain" field.
func ChainNEQ(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChain), v))
	})
}

// ChainIn applies the In predicate on the "chain" field.
func ChainIn(vs ...string) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChain), v...))
	})
}

// ChainNotIn applies the NotIn predicate on the "chain" field.
func ChainNotIn(vs ...string) predicate.Validator {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Validator(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChain), v...))
	})
}

// ChainGT applies the GT predicate on the "chain" field.
func ChainGT(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChain), v))
	})
}

// ChainGTE applies the GTE predicate on the "chain" field.
func ChainGTE(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChain), v))
	})
}

// ChainLT applies the LT predicate on the "chain" field.
func ChainLT(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChain), v))
	})
}

// ChainLTE applies the LTE predicate on the "chain" field.
func ChainLTE(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChain), v))
	})
}

// ChainContains applies the Contains predicate on the "chain" field.
func ChainContains(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChain), v))
	})
}

// ChainHasPrefix applies the HasPrefix predicate on the "chain" field.
func ChainHasPrefix(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChain), v))
	})
}

// ChainHasSuffix applies the HasSuffix predicate on the "chain" field.
func ChainHasSuffix(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChain), v))
	})
}

// ChainEqualFold applies the EqualFold predicate on the "chain" field.
func ChainEqualFold(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChain), v))
	})
}

// ChainContainsFold applies the ContainsFold predicate on the "chain" field.
func ChainContainsFold(v string) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChain), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Validator) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Validator) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Validator) predicate.Validator {
	return predicate.Validator(func(s *sql.Selector) {
		p(s.Not())
	})
}
