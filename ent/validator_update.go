// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/OdysseyMomentumExperience/harvester/ent/predicate"
	"github.com/OdysseyMomentumExperience/harvester/ent/validator"
	"github.com/OdysseyMomentumExperience/harvester/pkg/harvester"
)

// ValidatorUpdate is the builder for updating Validator entities.
type ValidatorUpdate struct {
	config
	hooks    []Hook
	mutation *ValidatorMutation
}

// Where appends a list predicates to the ValidatorUpdate builder.
func (vu *ValidatorUpdate) Where(ps ...predicate.Validator) *ValidatorUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetAccountID sets the "account_id" field.
func (vu *ValidatorUpdate) SetAccountID(s string) *ValidatorUpdate {
	vu.mutation.SetAccountID(s)
	return vu
}

// SetName sets the "name" field.
func (vu *ValidatorUpdate) SetName(s string) *ValidatorUpdate {
	vu.mutation.SetName(s)
	return vu
}

// SetCommission sets the "commission" field.
func (vu *ValidatorUpdate) SetCommission(f float64) *ValidatorUpdate {
	vu.mutation.ResetCommission()
	vu.mutation.SetCommission(f)
	return vu
}

// AddCommission adds f to the "commission" field.
func (vu *ValidatorUpdate) AddCommission(f float64) *ValidatorUpdate {
	vu.mutation.AddCommission(f)
	return vu
}

// SetStatus sets the "status" field.
func (vu *ValidatorUpdate) SetStatus(s string) *ValidatorUpdate {
	vu.mutation.SetStatus(s)
	return vu
}

// SetBalance sets the "balance" field.
func (vu *ValidatorUpdate) SetBalance(s string) *ValidatorUpdate {
	vu.mutation.SetBalance(s)
	return vu
}

// SetReserved sets the "reserved" field.
func (vu *ValidatorUpdate) SetReserved(s string) *ValidatorUpdate {
	vu.mutation.SetReserved(s)
	return vu
}

// SetLocked sets the "locked" field.
func (vu *ValidatorUpdate) SetLocked(hbl []harvester.ValidatorBalancesLocked) *ValidatorUpdate {
	vu.mutation.SetLocked(hbl)
	return vu
}

// SetOwnStake sets the "own_stake" field.
func (vu *ValidatorUpdate) SetOwnStake(s string) *ValidatorUpdate {
	vu.mutation.SetOwnStake(s)
	return vu
}

// SetTotalStake sets the "total_stake" field.
func (vu *ValidatorUpdate) SetTotalStake(s string) *ValidatorUpdate {
	vu.mutation.SetTotalStake(s)
	return vu
}

// SetIdentity sets the "identity" field.
func (vu *ValidatorUpdate) SetIdentity(hi harvester.ValidatorInfo) *ValidatorUpdate {
	vu.mutation.SetIdentity(hi)
	return vu
}

// SetNominators sets the "nominators" field.
func (vu *ValidatorUpdate) SetNominators(h []harvester.Nominator) *ValidatorUpdate {
	vu.mutation.SetNominators(h)
	return vu
}

// SetParent sets the "parent" field.
func (vu *ValidatorUpdate) SetParent(h harvester.Parent) *ValidatorUpdate {
	vu.mutation.SetParent(h)
	return vu
}

// SetChildren sets the "children" field.
func (vu *ValidatorUpdate) SetChildren(s []string) *ValidatorUpdate {
	vu.mutation.SetChildren(s)
	return vu
}

// SetHash sets the "hash" field.
func (vu *ValidatorUpdate) SetHash(s string) *ValidatorUpdate {
	vu.mutation.SetHash(s)
	return vu
}

// SetChain sets the "chain" field.
func (vu *ValidatorUpdate) SetChain(s string) *ValidatorUpdate {
	vu.mutation.SetChain(s)
	return vu
}

// Mutation returns the ValidatorMutation object of the builder.
func (vu *ValidatorUpdate) Mutation() *ValidatorMutation {
	return vu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *ValidatorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vu.hooks) == 0 {
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ValidatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			if vu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *ValidatorUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *ValidatorUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *ValidatorUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *ValidatorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   validator.Table,
			Columns: validator.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: validator.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.AccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldAccountID,
		})
	}
	if value, ok := vu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldName,
		})
	}
	if value, ok := vu.mutation.Commission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: validator.FieldCommission,
		})
	}
	if value, ok := vu.mutation.AddedCommission(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: validator.FieldCommission,
		})
	}
	if value, ok := vu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldStatus,
		})
	}
	if value, ok := vu.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldBalance,
		})
	}
	if value, ok := vu.mutation.Reserved(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldReserved,
		})
	}
	if value, ok := vu.mutation.Locked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: validator.FieldLocked,
		})
	}
	if value, ok := vu.mutation.OwnStake(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldOwnStake,
		})
	}
	if value, ok := vu.mutation.TotalStake(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldTotalStake,
		})
	}
	if value, ok := vu.mutation.Identity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: validator.FieldIdentity,
		})
	}
	if value, ok := vu.mutation.Nominators(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: validator.FieldNominators,
		})
	}
	if value, ok := vu.mutation.Parent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: validator.FieldParent,
		})
	}
	if value, ok := vu.mutation.Children(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: validator.FieldChildren,
		})
	}
	if value, ok := vu.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldHash,
		})
	}
	if value, ok := vu.mutation.Chain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldChain,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{validator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ValidatorUpdateOne is the builder for updating a single Validator entity.
type ValidatorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ValidatorMutation
}

// SetAccountID sets the "account_id" field.
func (vuo *ValidatorUpdateOne) SetAccountID(s string) *ValidatorUpdateOne {
	vuo.mutation.SetAccountID(s)
	return vuo
}

// SetName sets the "name" field.
func (vuo *ValidatorUpdateOne) SetName(s string) *ValidatorUpdateOne {
	vuo.mutation.SetName(s)
	return vuo
}

// SetCommission sets the "commission" field.
func (vuo *ValidatorUpdateOne) SetCommission(f float64) *ValidatorUpdateOne {
	vuo.mutation.ResetCommission()
	vuo.mutation.SetCommission(f)
	return vuo
}

// AddCommission adds f to the "commission" field.
func (vuo *ValidatorUpdateOne) AddCommission(f float64) *ValidatorUpdateOne {
	vuo.mutation.AddCommission(f)
	return vuo
}

// SetStatus sets the "status" field.
func (vuo *ValidatorUpdateOne) SetStatus(s string) *ValidatorUpdateOne {
	vuo.mutation.SetStatus(s)
	return vuo
}

// SetBalance sets the "balance" field.
func (vuo *ValidatorUpdateOne) SetBalance(s string) *ValidatorUpdateOne {
	vuo.mutation.SetBalance(s)
	return vuo
}

// SetReserved sets the "reserved" field.
func (vuo *ValidatorUpdateOne) SetReserved(s string) *ValidatorUpdateOne {
	vuo.mutation.SetReserved(s)
	return vuo
}

// SetLocked sets the "locked" field.
func (vuo *ValidatorUpdateOne) SetLocked(hbl []harvester.ValidatorBalancesLocked) *ValidatorUpdateOne {
	vuo.mutation.SetLocked(hbl)
	return vuo
}

// SetOwnStake sets the "own_stake" field.
func (vuo *ValidatorUpdateOne) SetOwnStake(s string) *ValidatorUpdateOne {
	vuo.mutation.SetOwnStake(s)
	return vuo
}

// SetTotalStake sets the "total_stake" field.
func (vuo *ValidatorUpdateOne) SetTotalStake(s string) *ValidatorUpdateOne {
	vuo.mutation.SetTotalStake(s)
	return vuo
}

// SetIdentity sets the "identity" field.
func (vuo *ValidatorUpdateOne) SetIdentity(hi harvester.ValidatorInfo) *ValidatorUpdateOne {
	vuo.mutation.SetIdentity(hi)
	return vuo
}

// SetNominators sets the "nominators" field.
func (vuo *ValidatorUpdateOne) SetNominators(h []harvester.Nominator) *ValidatorUpdateOne {
	vuo.mutation.SetNominators(h)
	return vuo
}

// SetParent sets the "parent" field.
func (vuo *ValidatorUpdateOne) SetParent(h harvester.Parent) *ValidatorUpdateOne {
	vuo.mutation.SetParent(h)
	return vuo
}

// SetChildren sets the "children" field.
func (vuo *ValidatorUpdateOne) SetChildren(s []string) *ValidatorUpdateOne {
	vuo.mutation.SetChildren(s)
	return vuo
}

// SetHash sets the "hash" field.
func (vuo *ValidatorUpdateOne) SetHash(s string) *ValidatorUpdateOne {
	vuo.mutation.SetHash(s)
	return vuo
}

// SetChain sets the "chain" field.
func (vuo *ValidatorUpdateOne) SetChain(s string) *ValidatorUpdateOne {
	vuo.mutation.SetChain(s)
	return vuo
}

// Mutation returns the ValidatorMutation object of the builder.
func (vuo *ValidatorUpdateOne) Mutation() *ValidatorMutation {
	return vuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *ValidatorUpdateOne) Select(field string, fields ...string) *ValidatorUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Validator entity.
func (vuo *ValidatorUpdateOne) Save(ctx context.Context) (*Validator, error) {
	var (
		err  error
		node *Validator
	)
	if len(vuo.hooks) == 0 {
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ValidatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			if vuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, vuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Validator)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ValidatorMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *ValidatorUpdateOne) SaveX(ctx context.Context) *Validator {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *ValidatorUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *ValidatorUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *ValidatorUpdateOne) sqlSave(ctx context.Context) (_node *Validator, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   validator.Table,
			Columns: validator.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: validator.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Validator.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, validator.FieldID)
		for _, f := range fields {
			if !validator.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != validator.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.AccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldAccountID,
		})
	}
	if value, ok := vuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldName,
		})
	}
	if value, ok := vuo.mutation.Commission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: validator.FieldCommission,
		})
	}
	if value, ok := vuo.mutation.AddedCommission(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: validator.FieldCommission,
		})
	}
	if value, ok := vuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldStatus,
		})
	}
	if value, ok := vuo.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldBalance,
		})
	}
	if value, ok := vuo.mutation.Reserved(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldReserved,
		})
	}
	if value, ok := vuo.mutation.Locked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: validator.FieldLocked,
		})
	}
	if value, ok := vuo.mutation.OwnStake(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldOwnStake,
		})
	}
	if value, ok := vuo.mutation.TotalStake(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldTotalStake,
		})
	}
	if value, ok := vuo.mutation.Identity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: validator.FieldIdentity,
		})
	}
	if value, ok := vuo.mutation.Nominators(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: validator.FieldNominators,
		})
	}
	if value, ok := vuo.mutation.Parent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: validator.FieldParent,
		})
	}
	if value, ok := vuo.mutation.Children(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: validator.FieldChildren,
		})
	}
	if value, ok := vuo.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldHash,
		})
	}
	if value, ok := vuo.mutation.Chain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldChain,
		})
	}
	_node = &Validator{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{validator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
