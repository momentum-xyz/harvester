// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/OdysseyMomentumExperience/harvester/ent/block"
	"github.com/OdysseyMomentumExperience/harvester/ent/predicate"
	"github.com/OdysseyMomentumExperience/harvester/pkg/harvester"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBlock = "Block"
)

// BlockMutation represents an operation that mutates the Block nodes in the graph.
type BlockMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	number              *uint32
	addnumber           *int32
	author_id           *string
	finalized           *bool
	extrinsics_count    *int
	addextrinsics_count *int
	extrinsics          *[]harvester.Extrinsic
	chain               *string
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*Block, error)
	predicates          []predicate.Block
}

var _ ent.Mutation = (*BlockMutation)(nil)

// blockOption allows management of the mutation configuration using functional options.
type blockOption func(*BlockMutation)

// newBlockMutation creates new mutation for the Block entity.
func newBlockMutation(c config, op Op, opts ...blockOption) *BlockMutation {
	m := &BlockMutation{
		config:        c,
		op:            op,
		typ:           TypeBlock,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBlockID sets the ID field of the mutation.
func withBlockID(id int) blockOption {
	return func(m *BlockMutation) {
		var (
			err   error
			once  sync.Once
			value *Block
		)
		m.oldValue = func(ctx context.Context) (*Block, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Block.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBlock sets the old Block of the mutation.
func withBlock(node *Block) blockOption {
	return func(m *BlockMutation) {
		m.oldValue = func(context.Context) (*Block, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BlockMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BlockMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BlockMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BlockMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Block.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNumber sets the "number" field.
func (m *BlockMutation) SetNumber(u uint32) {
	m.number = &u
	m.addnumber = nil
}

// Number returns the value of the "number" field in the mutation.
func (m *BlockMutation) Number() (r uint32, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldNumber(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// AddNumber adds u to the "number" field.
func (m *BlockMutation) AddNumber(u int32) {
	if m.addnumber != nil {
		*m.addnumber += u
	} else {
		m.addnumber = &u
	}
}

// AddedNumber returns the value that was added to the "number" field in this mutation.
func (m *BlockMutation) AddedNumber() (r int32, exists bool) {
	v := m.addnumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumber resets all changes to the "number" field.
func (m *BlockMutation) ResetNumber() {
	m.number = nil
	m.addnumber = nil
}

// SetAuthorID sets the "author_id" field.
func (m *BlockMutation) SetAuthorID(s string) {
	m.author_id = &s
}

// AuthorID returns the value of the "author_id" field in the mutation.
func (m *BlockMutation) AuthorID() (r string, exists bool) {
	v := m.author_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthorID returns the old "author_id" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldAuthorID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthorID: %w", err)
	}
	return oldValue.AuthorID, nil
}

// ResetAuthorID resets all changes to the "author_id" field.
func (m *BlockMutation) ResetAuthorID() {
	m.author_id = nil
}

// SetFinalized sets the "finalized" field.
func (m *BlockMutation) SetFinalized(b bool) {
	m.finalized = &b
}

// Finalized returns the value of the "finalized" field in the mutation.
func (m *BlockMutation) Finalized() (r bool, exists bool) {
	v := m.finalized
	if v == nil {
		return
	}
	return *v, true
}

// OldFinalized returns the old "finalized" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldFinalized(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinalized is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinalized requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinalized: %w", err)
	}
	return oldValue.Finalized, nil
}

// ResetFinalized resets all changes to the "finalized" field.
func (m *BlockMutation) ResetFinalized() {
	m.finalized = nil
}

// SetExtrinsicsCount sets the "extrinsics_count" field.
func (m *BlockMutation) SetExtrinsicsCount(i int) {
	m.extrinsics_count = &i
	m.addextrinsics_count = nil
}

// ExtrinsicsCount returns the value of the "extrinsics_count" field in the mutation.
func (m *BlockMutation) ExtrinsicsCount() (r int, exists bool) {
	v := m.extrinsics_count
	if v == nil {
		return
	}
	return *v, true
}

// OldExtrinsicsCount returns the old "extrinsics_count" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldExtrinsicsCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtrinsicsCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtrinsicsCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtrinsicsCount: %w", err)
	}
	return oldValue.ExtrinsicsCount, nil
}

// AddExtrinsicsCount adds i to the "extrinsics_count" field.
func (m *BlockMutation) AddExtrinsicsCount(i int) {
	if m.addextrinsics_count != nil {
		*m.addextrinsics_count += i
	} else {
		m.addextrinsics_count = &i
	}
}

// AddedExtrinsicsCount returns the value that was added to the "extrinsics_count" field in this mutation.
func (m *BlockMutation) AddedExtrinsicsCount() (r int, exists bool) {
	v := m.addextrinsics_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetExtrinsicsCount resets all changes to the "extrinsics_count" field.
func (m *BlockMutation) ResetExtrinsicsCount() {
	m.extrinsics_count = nil
	m.addextrinsics_count = nil
}

// SetExtrinsics sets the "extrinsics" field.
func (m *BlockMutation) SetExtrinsics(h []harvester.Extrinsic) {
	m.extrinsics = &h
}

// Extrinsics returns the value of the "extrinsics" field in the mutation.
func (m *BlockMutation) Extrinsics() (r []harvester.Extrinsic, exists bool) {
	v := m.extrinsics
	if v == nil {
		return
	}
	return *v, true
}

// OldExtrinsics returns the old "extrinsics" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldExtrinsics(ctx context.Context) (v []harvester.Extrinsic, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtrinsics is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtrinsics requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtrinsics: %w", err)
	}
	return oldValue.Extrinsics, nil
}

// ClearExtrinsics clears the value of the "extrinsics" field.
func (m *BlockMutation) ClearExtrinsics() {
	m.extrinsics = nil
	m.clearedFields[block.FieldExtrinsics] = struct{}{}
}

// ExtrinsicsCleared returns if the "extrinsics" field was cleared in this mutation.
func (m *BlockMutation) ExtrinsicsCleared() bool {
	_, ok := m.clearedFields[block.FieldExtrinsics]
	return ok
}

// ResetExtrinsics resets all changes to the "extrinsics" field.
func (m *BlockMutation) ResetExtrinsics() {
	m.extrinsics = nil
	delete(m.clearedFields, block.FieldExtrinsics)
}

// SetChain sets the "chain" field.
func (m *BlockMutation) SetChain(s string) {
	m.chain = &s
}

// Chain returns the value of the "chain" field in the mutation.
func (m *BlockMutation) Chain() (r string, exists bool) {
	v := m.chain
	if v == nil {
		return
	}
	return *v, true
}

// OldChain returns the old "chain" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldChain(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChain is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChain requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChain: %w", err)
	}
	return oldValue.Chain, nil
}

// ResetChain resets all changes to the "chain" field.
func (m *BlockMutation) ResetChain() {
	m.chain = nil
}

// Where appends a list predicates to the BlockMutation builder.
func (m *BlockMutation) Where(ps ...predicate.Block) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *BlockMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Block).
func (m *BlockMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BlockMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.number != nil {
		fields = append(fields, block.FieldNumber)
	}
	if m.author_id != nil {
		fields = append(fields, block.FieldAuthorID)
	}
	if m.finalized != nil {
		fields = append(fields, block.FieldFinalized)
	}
	if m.extrinsics_count != nil {
		fields = append(fields, block.FieldExtrinsicsCount)
	}
	if m.extrinsics != nil {
		fields = append(fields, block.FieldExtrinsics)
	}
	if m.chain != nil {
		fields = append(fields, block.FieldChain)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BlockMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case block.FieldNumber:
		return m.Number()
	case block.FieldAuthorID:
		return m.AuthorID()
	case block.FieldFinalized:
		return m.Finalized()
	case block.FieldExtrinsicsCount:
		return m.ExtrinsicsCount()
	case block.FieldExtrinsics:
		return m.Extrinsics()
	case block.FieldChain:
		return m.Chain()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BlockMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case block.FieldNumber:
		return m.OldNumber(ctx)
	case block.FieldAuthorID:
		return m.OldAuthorID(ctx)
	case block.FieldFinalized:
		return m.OldFinalized(ctx)
	case block.FieldExtrinsicsCount:
		return m.OldExtrinsicsCount(ctx)
	case block.FieldExtrinsics:
		return m.OldExtrinsics(ctx)
	case block.FieldChain:
		return m.OldChain(ctx)
	}
	return nil, fmt.Errorf("unknown Block field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlockMutation) SetField(name string, value ent.Value) error {
	switch name {
	case block.FieldNumber:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	case block.FieldAuthorID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthorID(v)
		return nil
	case block.FieldFinalized:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinalized(v)
		return nil
	case block.FieldExtrinsicsCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtrinsicsCount(v)
		return nil
	case block.FieldExtrinsics:
		v, ok := value.([]harvester.Extrinsic)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtrinsics(v)
		return nil
	case block.FieldChain:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChain(v)
		return nil
	}
	return fmt.Errorf("unknown Block field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BlockMutation) AddedFields() []string {
	var fields []string
	if m.addnumber != nil {
		fields = append(fields, block.FieldNumber)
	}
	if m.addextrinsics_count != nil {
		fields = append(fields, block.FieldExtrinsicsCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BlockMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case block.FieldNumber:
		return m.AddedNumber()
	case block.FieldExtrinsicsCount:
		return m.AddedExtrinsicsCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlockMutation) AddField(name string, value ent.Value) error {
	switch name {
	case block.FieldNumber:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumber(v)
		return nil
	case block.FieldExtrinsicsCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExtrinsicsCount(v)
		return nil
	}
	return fmt.Errorf("unknown Block numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BlockMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(block.FieldExtrinsics) {
		fields = append(fields, block.FieldExtrinsics)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BlockMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BlockMutation) ClearField(name string) error {
	switch name {
	case block.FieldExtrinsics:
		m.ClearExtrinsics()
		return nil
	}
	return fmt.Errorf("unknown Block nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BlockMutation) ResetField(name string) error {
	switch name {
	case block.FieldNumber:
		m.ResetNumber()
		return nil
	case block.FieldAuthorID:
		m.ResetAuthorID()
		return nil
	case block.FieldFinalized:
		m.ResetFinalized()
		return nil
	case block.FieldExtrinsicsCount:
		m.ResetExtrinsicsCount()
		return nil
	case block.FieldExtrinsics:
		m.ResetExtrinsics()
		return nil
	case block.FieldChain:
		m.ResetChain()
		return nil
	}
	return fmt.Errorf("unknown Block field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BlockMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BlockMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BlockMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BlockMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BlockMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BlockMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BlockMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Block unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BlockMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Block edge %s", name)
}
