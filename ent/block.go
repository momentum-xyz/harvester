// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/OdysseyMomentumExperience/harvester/ent/block"
	"github.com/OdysseyMomentumExperience/harvester/pkg/harvester"
)

// Block is the model entity for the Block schema.
type Block struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Number holds the value of the "number" field.
	Number uint32 `json:"number,omitempty"`
	// AuthorID holds the value of the "author_id" field.
	AuthorID string `json:"author_id,omitempty"`
	// Finalized holds the value of the "finalized" field.
	Finalized bool `json:"finalized,omitempty"`
	// ExtrinsicsCount holds the value of the "extrinsics_count" field.
	ExtrinsicsCount int `json:"extrinsics_count,omitempty"`
	// Extrinsics holds the value of the "extrinsics" field.
	Extrinsics []harvester.Extrinsic `json:"extrinsics,omitempty"`
	// Chain holds the value of the "chain" field.
	Chain string `json:"chain,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Block) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case block.FieldExtrinsics:
			values[i] = new([]byte)
		case block.FieldFinalized:
			values[i] = new(sql.NullBool)
		case block.FieldID, block.FieldNumber, block.FieldExtrinsicsCount:
			values[i] = new(sql.NullInt64)
		case block.FieldAuthorID, block.FieldChain:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Block", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Block fields.
func (b *Block) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case block.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case block.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				b.Number = uint32(value.Int64)
			}
		case block.FieldAuthorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_id", values[i])
			} else if value.Valid {
				b.AuthorID = value.String
			}
		case block.FieldFinalized:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field finalized", values[i])
			} else if value.Valid {
				b.Finalized = value.Bool
			}
		case block.FieldExtrinsicsCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field extrinsics_count", values[i])
			} else if value.Valid {
				b.ExtrinsicsCount = int(value.Int64)
			}
		case block.FieldExtrinsics:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extrinsics", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.Extrinsics); err != nil {
					return fmt.Errorf("unmarshal field extrinsics: %w", err)
				}
			}
		case block.FieldChain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chain", values[i])
			} else if value.Valid {
				b.Chain = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Block.
// Note that you need to call Block.Unwrap() before calling this method if this Block
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Block) Update() *BlockUpdateOne {
	return (&BlockClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Block entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Block) Unwrap() *Block {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Block is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Block) String() string {
	var builder strings.Builder
	builder.WriteString("Block(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", number=")
	builder.WriteString(fmt.Sprintf("%v", b.Number))
	builder.WriteString(", author_id=")
	builder.WriteString(b.AuthorID)
	builder.WriteString(", finalized=")
	builder.WriteString(fmt.Sprintf("%v", b.Finalized))
	builder.WriteString(", extrinsics_count=")
	builder.WriteString(fmt.Sprintf("%v", b.ExtrinsicsCount))
	builder.WriteString(", extrinsics=")
	builder.WriteString(fmt.Sprintf("%v", b.Extrinsics))
	builder.WriteString(", chain=")
	builder.WriteString(b.Chain)
	builder.WriteByte(')')
	return builder.String()
}

// Blocks is a parsable slice of Block.
type Blocks []*Block

func (b Blocks) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
