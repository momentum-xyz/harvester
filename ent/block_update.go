// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/OdysseyMomentumExperience/harvester/ent/block"
	"github.com/OdysseyMomentumExperience/harvester/ent/predicate"
	"github.com/OdysseyMomentumExperience/harvester/pkg/harvester"
)

// BlockUpdate is the builder for updating Block entities.
type BlockUpdate struct {
	config
	hooks    []Hook
	mutation *BlockMutation
}

// Where appends a list predicates to the BlockUpdate builder.
func (bu *BlockUpdate) Where(ps ...predicate.Block) *BlockUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetNumber sets the "number" field.
func (bu *BlockUpdate) SetNumber(u uint32) *BlockUpdate {
	bu.mutation.ResetNumber()
	bu.mutation.SetNumber(u)
	return bu
}

// AddNumber adds u to the "number" field.
func (bu *BlockUpdate) AddNumber(u int32) *BlockUpdate {
	bu.mutation.AddNumber(u)
	return bu
}

// SetAuthorID sets the "author_id" field.
func (bu *BlockUpdate) SetAuthorID(s string) *BlockUpdate {
	bu.mutation.SetAuthorID(s)
	return bu
}

// SetFinalized sets the "finalized" field.
func (bu *BlockUpdate) SetFinalized(b bool) *BlockUpdate {
	bu.mutation.SetFinalized(b)
	return bu
}

// SetExtrinsicsCount sets the "extrinsics_count" field.
func (bu *BlockUpdate) SetExtrinsicsCount(i int) *BlockUpdate {
	bu.mutation.ResetExtrinsicsCount()
	bu.mutation.SetExtrinsicsCount(i)
	return bu
}

// AddExtrinsicsCount adds i to the "extrinsics_count" field.
func (bu *BlockUpdate) AddExtrinsicsCount(i int) *BlockUpdate {
	bu.mutation.AddExtrinsicsCount(i)
	return bu
}

// SetExtrinsics sets the "extrinsics" field.
func (bu *BlockUpdate) SetExtrinsics(h []harvester.Extrinsic) *BlockUpdate {
	bu.mutation.SetExtrinsics(h)
	return bu
}

// ClearExtrinsics clears the value of the "extrinsics" field.
func (bu *BlockUpdate) ClearExtrinsics() *BlockUpdate {
	bu.mutation.ClearExtrinsics()
	return bu
}

// SetChain sets the "chain" field.
func (bu *BlockUpdate) SetChain(s string) *BlockUpdate {
	bu.mutation.SetChain(s)
	return bu
}

// Mutation returns the BlockMutation object of the builder.
func (bu *BlockUpdate) Mutation() *BlockMutation {
	return bu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BlockUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		if err = bu.check(); err != nil {
			return 0, err
		}
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bu.check(); err != nil {
				return 0, err
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			if bu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BlockUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BlockUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BlockUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BlockUpdate) check() error {
	if v, ok := bu.mutation.Number(); ok {
		if err := block.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Block.number": %w`, err)}
		}
	}
	return nil
}

func (bu *BlockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   block.Table,
			Columns: block.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: block.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: block.FieldNumber,
		})
	}
	if value, ok := bu.mutation.AddedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: block.FieldNumber,
		})
	}
	if value, ok := bu.mutation.AuthorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: block.FieldAuthorID,
		})
	}
	if value, ok := bu.mutation.Finalized(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: block.FieldFinalized,
		})
	}
	if value, ok := bu.mutation.ExtrinsicsCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: block.FieldExtrinsicsCount,
		})
	}
	if value, ok := bu.mutation.AddedExtrinsicsCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: block.FieldExtrinsicsCount,
		})
	}
	if value, ok := bu.mutation.Extrinsics(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: block.FieldExtrinsics,
		})
	}
	if bu.mutation.ExtrinsicsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: block.FieldExtrinsics,
		})
	}
	if value, ok := bu.mutation.Chain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: block.FieldChain,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{block.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// BlockUpdateOne is the builder for updating a single Block entity.
type BlockUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockMutation
}

// SetNumber sets the "number" field.
func (buo *BlockUpdateOne) SetNumber(u uint32) *BlockUpdateOne {
	buo.mutation.ResetNumber()
	buo.mutation.SetNumber(u)
	return buo
}

// AddNumber adds u to the "number" field.
func (buo *BlockUpdateOne) AddNumber(u int32) *BlockUpdateOne {
	buo.mutation.AddNumber(u)
	return buo
}

// SetAuthorID sets the "author_id" field.
func (buo *BlockUpdateOne) SetAuthorID(s string) *BlockUpdateOne {
	buo.mutation.SetAuthorID(s)
	return buo
}

// SetFinalized sets the "finalized" field.
func (buo *BlockUpdateOne) SetFinalized(b bool) *BlockUpdateOne {
	buo.mutation.SetFinalized(b)
	return buo
}

// SetExtrinsicsCount sets the "extrinsics_count" field.
func (buo *BlockUpdateOne) SetExtrinsicsCount(i int) *BlockUpdateOne {
	buo.mutation.ResetExtrinsicsCount()
	buo.mutation.SetExtrinsicsCount(i)
	return buo
}

// AddExtrinsicsCount adds i to the "extrinsics_count" field.
func (buo *BlockUpdateOne) AddExtrinsicsCount(i int) *BlockUpdateOne {
	buo.mutation.AddExtrinsicsCount(i)
	return buo
}

// SetExtrinsics sets the "extrinsics" field.
func (buo *BlockUpdateOne) SetExtrinsics(h []harvester.Extrinsic) *BlockUpdateOne {
	buo.mutation.SetExtrinsics(h)
	return buo
}

// ClearExtrinsics clears the value of the "extrinsics" field.
func (buo *BlockUpdateOne) ClearExtrinsics() *BlockUpdateOne {
	buo.mutation.ClearExtrinsics()
	return buo
}

// SetChain sets the "chain" field.
func (buo *BlockUpdateOne) SetChain(s string) *BlockUpdateOne {
	buo.mutation.SetChain(s)
	return buo
}

// Mutation returns the BlockMutation object of the builder.
func (buo *BlockUpdateOne) Mutation() *BlockMutation {
	return buo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BlockUpdateOne) Select(field string, fields ...string) *BlockUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Block entity.
func (buo *BlockUpdateOne) Save(ctx context.Context) (*Block, error) {
	var (
		err  error
		node *Block
	)
	if len(buo.hooks) == 0 {
		if err = buo.check(); err != nil {
			return nil, err
		}
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buo.check(); err != nil {
				return nil, err
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			if buo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BlockUpdateOne) SaveX(ctx context.Context) *Block {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BlockUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BlockUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BlockUpdateOne) check() error {
	if v, ok := buo.mutation.Number(); ok {
		if err := block.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Block.number": %w`, err)}
		}
	}
	return nil
}

func (buo *BlockUpdateOne) sqlSave(ctx context.Context) (_node *Block, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   block.Table,
			Columns: block.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: block.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Block.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, block.FieldID)
		for _, f := range fields {
			if !block.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != block.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: block.FieldNumber,
		})
	}
	if value, ok := buo.mutation.AddedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: block.FieldNumber,
		})
	}
	if value, ok := buo.mutation.AuthorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: block.FieldAuthorID,
		})
	}
	if value, ok := buo.mutation.Finalized(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: block.FieldFinalized,
		})
	}
	if value, ok := buo.mutation.ExtrinsicsCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: block.FieldExtrinsicsCount,
		})
	}
	if value, ok := buo.mutation.AddedExtrinsicsCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: block.FieldExtrinsicsCount,
		})
	}
	if value, ok := buo.mutation.Extrinsics(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: block.FieldExtrinsics,
		})
	}
	if buo.mutation.ExtrinsicsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: block.FieldExtrinsics,
		})
	}
	if value, ok := buo.mutation.Chain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: block.FieldChain,
		})
	}
	_node = &Block{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{block.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
