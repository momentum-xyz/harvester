// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/OdysseyMomentumExperience/harvester/ent/validator"
	"github.com/OdysseyMomentumExperience/harvester/pkg/harvester"
)

// ValidatorCreate is the builder for creating a Validator entity.
type ValidatorCreate struct {
	config
	mutation *ValidatorMutation
	hooks    []Hook
}

// SetAccountID sets the "account_id" field.
func (vc *ValidatorCreate) SetAccountID(s string) *ValidatorCreate {
	vc.mutation.SetAccountID(s)
	return vc
}

// SetName sets the "name" field.
func (vc *ValidatorCreate) SetName(s string) *ValidatorCreate {
	vc.mutation.SetName(s)
	return vc
}

// SetCommission sets the "commission" field.
func (vc *ValidatorCreate) SetCommission(f float64) *ValidatorCreate {
	vc.mutation.SetCommission(f)
	return vc
}

// SetStatus sets the "status" field.
func (vc *ValidatorCreate) SetStatus(s string) *ValidatorCreate {
	vc.mutation.SetStatus(s)
	return vc
}

// SetBalance sets the "balance" field.
func (vc *ValidatorCreate) SetBalance(s string) *ValidatorCreate {
	vc.mutation.SetBalance(s)
	return vc
}

// SetReserved sets the "reserved" field.
func (vc *ValidatorCreate) SetReserved(s string) *ValidatorCreate {
	vc.mutation.SetReserved(s)
	return vc
}

// SetLocked sets the "locked" field.
func (vc *ValidatorCreate) SetLocked(hbl []harvester.ValidatorBalancesLocked) *ValidatorCreate {
	vc.mutation.SetLocked(hbl)
	return vc
}

// SetOwnStake sets the "own_stake" field.
func (vc *ValidatorCreate) SetOwnStake(s string) *ValidatorCreate {
	vc.mutation.SetOwnStake(s)
	return vc
}

// SetTotalStake sets the "total_stake" field.
func (vc *ValidatorCreate) SetTotalStake(s string) *ValidatorCreate {
	vc.mutation.SetTotalStake(s)
	return vc
}

// SetIdentity sets the "identity" field.
func (vc *ValidatorCreate) SetIdentity(hi harvester.ValidatorInfo) *ValidatorCreate {
	vc.mutation.SetIdentity(hi)
	return vc
}

// SetNominators sets the "nominators" field.
func (vc *ValidatorCreate) SetNominators(h []harvester.Nominator) *ValidatorCreate {
	vc.mutation.SetNominators(h)
	return vc
}

// SetParent sets the "parent" field.
func (vc *ValidatorCreate) SetParent(h harvester.Parent) *ValidatorCreate {
	vc.mutation.SetParent(h)
	return vc
}

// SetChildren sets the "children" field.
func (vc *ValidatorCreate) SetChildren(s []string) *ValidatorCreate {
	vc.mutation.SetChildren(s)
	return vc
}

// SetHash sets the "hash" field.
func (vc *ValidatorCreate) SetHash(s string) *ValidatorCreate {
	vc.mutation.SetHash(s)
	return vc
}

// SetChain sets the "chain" field.
func (vc *ValidatorCreate) SetChain(s string) *ValidatorCreate {
	vc.mutation.SetChain(s)
	return vc
}

// Mutation returns the ValidatorMutation object of the builder.
func (vc *ValidatorCreate) Mutation() *ValidatorMutation {
	return vc.mutation
}

// Save creates the Validator in the database.
func (vc *ValidatorCreate) Save(ctx context.Context) (*Validator, error) {
	var (
		err  error
		node *Validator
	)
	if len(vc.hooks) == 0 {
		if err = vc.check(); err != nil {
			return nil, err
		}
		node, err = vc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ValidatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vc.check(); err != nil {
				return nil, err
			}
			vc.mutation = mutation
			if node, err = vc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vc.hooks) - 1; i >= 0; i-- {
			if vc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, vc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Validator)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ValidatorMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vc *ValidatorCreate) SaveX(ctx context.Context) *Validator {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *ValidatorCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *ValidatorCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *ValidatorCreate) check() error {
	if _, ok := vc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "Validator.account_id"`)}
	}
	if _, ok := vc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Validator.name"`)}
	}
	if _, ok := vc.mutation.Commission(); !ok {
		return &ValidationError{Name: "commission", err: errors.New(`ent: missing required field "Validator.commission"`)}
	}
	if _, ok := vc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Validator.status"`)}
	}
	if _, ok := vc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "Validator.balance"`)}
	}
	if _, ok := vc.mutation.Reserved(); !ok {
		return &ValidationError{Name: "reserved", err: errors.New(`ent: missing required field "Validator.reserved"`)}
	}
	if _, ok := vc.mutation.Locked(); !ok {
		return &ValidationError{Name: "locked", err: errors.New(`ent: missing required field "Validator.locked"`)}
	}
	if _, ok := vc.mutation.OwnStake(); !ok {
		return &ValidationError{Name: "own_stake", err: errors.New(`ent: missing required field "Validator.own_stake"`)}
	}
	if _, ok := vc.mutation.TotalStake(); !ok {
		return &ValidationError{Name: "total_stake", err: errors.New(`ent: missing required field "Validator.total_stake"`)}
	}
	if _, ok := vc.mutation.Identity(); !ok {
		return &ValidationError{Name: "identity", err: errors.New(`ent: missing required field "Validator.identity"`)}
	}
	if _, ok := vc.mutation.Nominators(); !ok {
		return &ValidationError{Name: "nominators", err: errors.New(`ent: missing required field "Validator.nominators"`)}
	}
	if _, ok := vc.mutation.Parent(); !ok {
		return &ValidationError{Name: "parent", err: errors.New(`ent: missing required field "Validator.parent"`)}
	}
	if _, ok := vc.mutation.Children(); !ok {
		return &ValidationError{Name: "children", err: errors.New(`ent: missing required field "Validator.children"`)}
	}
	if _, ok := vc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Validator.hash"`)}
	}
	if _, ok := vc.mutation.Chain(); !ok {
		return &ValidationError{Name: "chain", err: errors.New(`ent: missing required field "Validator.chain"`)}
	}
	return nil
}

func (vc *ValidatorCreate) sqlSave(ctx context.Context) (*Validator, error) {
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vc *ValidatorCreate) createSpec() (*Validator, *sqlgraph.CreateSpec) {
	var (
		_node = &Validator{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: validator.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: validator.FieldID,
			},
		}
	)
	if value, ok := vc.mutation.AccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldAccountID,
		})
		_node.AccountID = value
	}
	if value, ok := vc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldName,
		})
		_node.Name = value
	}
	if value, ok := vc.mutation.Commission(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: validator.FieldCommission,
		})
		_node.Commission = value
	}
	if value, ok := vc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := vc.mutation.Balance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldBalance,
		})
		_node.Balance = value
	}
	if value, ok := vc.mutation.Reserved(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldReserved,
		})
		_node.Reserved = value
	}
	if value, ok := vc.mutation.Locked(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: validator.FieldLocked,
		})
		_node.Locked = value
	}
	if value, ok := vc.mutation.OwnStake(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldOwnStake,
		})
		_node.OwnStake = value
	}
	if value, ok := vc.mutation.TotalStake(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldTotalStake,
		})
		_node.TotalStake = value
	}
	if value, ok := vc.mutation.Identity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: validator.FieldIdentity,
		})
		_node.Identity = value
	}
	if value, ok := vc.mutation.Nominators(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: validator.FieldNominators,
		})
		_node.Nominators = value
	}
	if value, ok := vc.mutation.Parent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: validator.FieldParent,
		})
		_node.Parent = value
	}
	if value, ok := vc.mutation.Children(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: validator.FieldChildren,
		})
		_node.Children = value
	}
	if value, ok := vc.mutation.Hash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldHash,
		})
		_node.Hash = value
	}
	if value, ok := vc.mutation.Chain(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: validator.FieldChain,
		})
		_node.Chain = value
	}
	return _node, _spec
}

// ValidatorCreateBulk is the builder for creating many Validator entities in bulk.
type ValidatorCreateBulk struct {
	config
	builders []*ValidatorCreate
}

// Save creates the Validator entities in the database.
func (vcb *ValidatorCreateBulk) Save(ctx context.Context) ([]*Validator, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Validator, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ValidatorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *ValidatorCreateBulk) SaveX(ctx context.Context) []*Validator {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *ValidatorCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *ValidatorCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
